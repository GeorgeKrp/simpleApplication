var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var fs = require('fs');
var https = require('https');
var port = normalizePort(process.env.PORT || '8080');
var https_port = process.env.PORT_HTTPS || 8443;
var options = {};

if (process.env.ENV !== 'DEV') {
  var privatekey = fs.readFileSync('privatekey.pem', 'utf8');
  var cert = fs.readFileSync('server.crt', 'utf8');
  var header = '-----BEGIN PRIVATE KEY-----';
  var footer = '-----END PRIVATE KEY-----';
  privatekey = privatekey.split(header)[1];
  privatekey = privatekey.split(footer)[0];
  privatekey = header + '\n' + privatekey.replace(/ /g, '\n') + footer + '\n';

  header = '-----BEGIN CERTIFICATE-----';
  footer = '-----END CERTIFICATE-----';
  cert = cert.split(header)[1];
  cert = cert.split(footer)[0];
  cert = header + '\n' + cert.replace(/ /g, '\n') + footer + '\n';

  options = {
    key: privatekey,
    cert: cert
  };

  app.set('port', https_port);

  var server = https.createServer(options, app).listen(https_port, function () {
    console.log('Magic happens on port ' + https_port);
  });

  server.on('error', onError);
  server.on('listening', onListening);

  http.createServer(function (req, res) {
    res.writeHead(301, { 'Location': 'https://' + req.headers['host'].replace(port, https_port) + req.url });
    console.log('http request, will go to >> ');
    console.log('https://' + req.headers['host'].replace(port, https_port) + req.url);
    res.end();
  }).listen(port);
} else {
  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
